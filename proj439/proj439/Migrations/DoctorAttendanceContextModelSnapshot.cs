// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using proj439.Model;

#nullable disable

namespace proj439.Migrations
{
    [DbContext(typeof(DoctorAttendanceContext))]
    partial class DoctorAttendanceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BelongTo", b =>
                {
                    b.Property<int>("DepId")
                        .HasColumnType("int")
                        .HasColumnName("DEP_ID");

                    b.Property<int>("Sectionid")
                        .HasColumnType("int")
                        .HasColumnName("SECTIONID");

                    b.HasKey("DepId", "Sectionid");

                    b.HasIndex("Sectionid");

                    b.ToTable("BELONG_TO", (string)null);
                });

            modelBuilder.Entity("Ha", b =>
                {
                    b.Property<int>("Facultyid")
                        .HasColumnType("int")
                        .HasColumnName("FACULTYID");

                    b.Property<int>("Sectionid")
                        .HasColumnType("int")
                        .HasColumnName("SECTIONID");

                    b.HasKey("Facultyid", "Sectionid");

                    b.HasIndex("Sectionid");

                    b.ToTable("HAS", (string)null);
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DOCTOR_ID");

                    b.Property<int>("DepId")
                        .HasColumnType("int")
                        .HasColumnName("DEP_ID");

                    b.HasKey("DoctorId", "DepId");

                    b.HasIndex("DepId");

                    b.ToTable("TEACHES", (string)null);
                });

            modelBuilder.Entity("proj439.Model.Attendence", b =>
                {
                    b.Property<int>("AttId")
                        .HasColumnType("int")
                        .HasColumnName("ATT_ID");

                    b.Property<bool?>("Attend")
                        .HasColumnType("bit")
                        .HasColumnName("ATTEND");

                    b.Property<string>("Comments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("COMMENTS");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date")
                        .HasColumnName("DATE");

                    b.Property<int>("DepId")
                        .HasColumnType("int")
                        .HasColumnName("DEP_ID");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DOCTOR_ID");

                    b.Property<int?>("NbHours")
                        .HasColumnType("int")
                        .HasColumnName("NB_HOURS");

                    b.HasKey("AttId")
                        .HasName("PK_ATTENDANCE");

                    b.HasIndex("DepId");

                    b.HasIndex("DoctorId");

                    b.ToTable("ATTENDENCE", (string)null);
                });

            modelBuilder.Entity("proj439.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TYPE");

                    b.HasKey("CategoryId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CategoryId"), false);

                    b.ToTable("CATEGORY", (string)null);
                });

            modelBuilder.Entity("proj439.Model.Department", b =>
                {
                    b.Property<int>("DepId")
                        .HasColumnType("int")
                        .HasColumnName("DEP_ID");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DOCTOR_ID");

                    b.Property<int?>("Nbdoctors")
                        .HasColumnType("int")
                        .HasColumnName("NBDOCTORS");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER");

                    b.HasKey("DepId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DepId"), false);

                    b.HasIndex(new[] { "DoctorId" }, "COORDINATES_FK");

                    b.ToTable("DEPARTMENT", (string)null);
                });

            modelBuilder.Entity("proj439.Model.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DOCTOR_ID");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("AGE");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CITY");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Firstname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<string>("Lastname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LASTNAME");

                    b.HasKey("DoctorId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DoctorId"), false);

                    b.HasIndex("CategoryId");

                    b.ToTable("DOCTOR", (string)null);
                });

            modelBuilder.Entity("proj439.Model.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("EMP_ID");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("AGE");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CITY");

                    b.Property<int?>("DepId")
                        .HasColumnType("int")
                        .HasColumnName("DEP_ID");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Firstname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<string>("Lastname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LASTNAME");

                    b.HasKey("EmpId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("EmpId"), false);

                    b.HasIndex(new[] { "DepId" }, "WORK_IN_FK");

                    b.ToTable("EMPLOYEE", (string)null);
                });

            modelBuilder.Entity("proj439.Model.Faculty", b =>
                {
                    b.Property<int>("Facultyid")
                        .HasColumnType("int")
                        .HasColumnName("FACULTYID");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DOCTOR_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("Facultyid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Facultyid"), false);

                    b.HasIndex(new[] { "DoctorId" }, "MANAGES_FK");

                    b.ToTable("FACULTY", (string)null);
                });

            modelBuilder.Entity("proj439.Model.Permission", b =>
                {
                    b.Property<int>("Permissionid")
                        .HasColumnType("int")
                        .HasColumnName("PERMISSIONID");

                    b.Property<int?>("AddAttendence")
                        .HasColumnType("int")
                        .HasColumnName("ADD_ATTENDENCE");

                    b.Property<int?>("DeleteAttendence")
                        .HasColumnType("int")
                        .HasColumnName("DELETE_ATTENDENCE");

                    b.Property<int?>("UpdateAttendence")
                        .HasColumnType("int")
                        .HasColumnName("UPDATE_ATTENDENCE");

                    b.HasKey("Permissionid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Permissionid"), false);

                    b.ToTable("PERMISSIONS", (string)null);
                });

            modelBuilder.Entity("proj439.Model.Section", b =>
                {
                    b.Property<int>("Sectionid")
                        .HasColumnType("int")
                        .HasColumnName("SECTIONID");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DOCTOR_ID");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LOCATION");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("NUMBER");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PHONE_NUMBER");

                    b.HasKey("Sectionid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Sectionid"), false);

                    b.HasIndex(new[] { "DoctorId" }, "DIRECTS_FK");

                    b.ToTable("SECTION", (string)null);
                });

            modelBuilder.Entity("proj439.Model.User", b =>
                {
                    b.Property<int>("EmpId2")
                        .HasColumnType("int")
                        .HasColumnName("EMP_ID2");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("AGE");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CITY");

                    b.Property<DateTime?>("Datecreated")
                        .HasColumnType("datetime")
                        .HasColumnName("DATECREATED");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DOCTOR_ID");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("EMAIL");

                    b.Property<int?>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("EMP_ID");

                    b.Property<string>("Firstname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FIRSTNAME");

                    b.Property<DateTime?>("Lastmodified")
                        .HasColumnType("datetime")
                        .HasColumnName("LASTMODIFIED");

                    b.Property<string>("Lastname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LASTNAME");

                    b.Property<int?>("Permissionid")
                        .HasColumnType("int")
                        .HasColumnName("PERMISSIONID");

                    b.HasKey("EmpId2");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("EmpId2"), false);

                    b.HasIndex(new[] { "Permissionid" }, "HAS_PERMISISON_FK");

                    b.HasIndex(new[] { "EmpId" }, "RELATIONSHIP_9_FK");

                    b.HasIndex(new[] { "DoctorId" }, "USES_FK");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("BelongTo", b =>
                {
                    b.HasOne("proj439.Model.Department", null)
                        .WithMany()
                        .HasForeignKey("DepId")
                        .IsRequired()
                        .HasConstraintName("FK_BELONG_T_BELONG_TO_DEPARTME");

                    b.HasOne("proj439.Model.Section", null)
                        .WithMany()
                        .HasForeignKey("Sectionid")
                        .IsRequired()
                        .HasConstraintName("FK_BELONG_T_BELONG_TO_SECTION");
                });

            modelBuilder.Entity("Ha", b =>
                {
                    b.HasOne("proj439.Model.Faculty", null)
                        .WithMany()
                        .HasForeignKey("Facultyid")
                        .IsRequired()
                        .HasConstraintName("FK_HAS_HAS_FACULTY");

                    b.HasOne("proj439.Model.Section", null)
                        .WithMany()
                        .HasForeignKey("Sectionid")
                        .IsRequired()
                        .HasConstraintName("FK_HAS_HAS2_SECTION");
                });

            modelBuilder.Entity("Teach", b =>
                {
                    b.HasOne("proj439.Model.Department", null)
                        .WithMany()
                        .HasForeignKey("DepId")
                        .IsRequired()
                        .HasConstraintName("FK_TEACHES_TEACHES2_DEPARTME");

                    b.HasOne("proj439.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_TEACHES_TEACHES_DOCTOR");
                });

            modelBuilder.Entity("proj439.Model.Attendence", b =>
                {
                    b.HasOne("proj439.Model.Department", "Dep")
                        .WithMany("Attendences")
                        .HasForeignKey("DepId")
                        .IsRequired()
                        .HasConstraintName("FK_ATTENDAN_ATTENDANC_DEPARTME");

                    b.HasOne("proj439.Model.Doctor", "Doctor")
                        .WithMany("Attendences")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_ATTENDAN_ATTENDANC_DOCTOR");

                    b.Navigation("Dep");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("proj439.Model.Department", b =>
                {
                    b.HasOne("proj439.Model.Doctor", "Doctor")
                        .WithMany("Departments")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DEPARTME_COORDINAT_DOCTOR");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("proj439.Model.Doctor", b =>
                {
                    b.HasOne("proj439.Model.Category", "Category")
                        .WithMany("Doctors")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_DOCTOR_IS_OF_TYP_CATEGORY");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("proj439.Model.Employee", b =>
                {
                    b.HasOne("proj439.Model.Department", "Dep")
                        .WithMany("Employees")
                        .HasForeignKey("DepId")
                        .HasConstraintName("FK_EMPLOYEE_WORK_IN_DEPARTME");

                    b.Navigation("Dep");
                });

            modelBuilder.Entity("proj439.Model.Faculty", b =>
                {
                    b.HasOne("proj439.Model.Doctor", "Doctor")
                        .WithMany("Faculties")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_FACULTY_MANAGES_DOCTOR");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("proj439.Model.Section", b =>
                {
                    b.HasOne("proj439.Model.Doctor", "Doctor")
                        .WithMany("Sections")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_SECTION_DIRECTS_DOCTOR");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("proj439.Model.User", b =>
                {
                    b.HasOne("proj439.Model.Doctor", "Doctor")
                        .WithMany("Users")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_USER_USES_DOCTOR");

                    b.HasOne("proj439.Model.Employee", "Emp")
                        .WithMany("Users")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_USER_RELATIONS_EMPLOYEE");

                    b.HasOne("proj439.Model.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("Permissionid")
                        .HasConstraintName("FK_USER_HAS_PERMI_PERMISSI");

                    b.Navigation("Doctor");

                    b.Navigation("Emp");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("proj439.Model.Category", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("proj439.Model.Department", b =>
                {
                    b.Navigation("Attendences");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("proj439.Model.Doctor", b =>
                {
                    b.Navigation("Attendences");

                    b.Navigation("Departments");

                    b.Navigation("Faculties");

                    b.Navigation("Sections");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("proj439.Model.Employee", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("proj439.Model.Permission", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
